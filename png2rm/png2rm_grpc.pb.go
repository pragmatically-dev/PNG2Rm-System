// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: png2rm.proto

package png2rm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PNG2RmServiceClient is the client API for PNG2RmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PNG2RmServiceClient interface {
	UploadAndConvert(ctx context.Context, opts ...grpc.CallOption) (PNG2RmService_UploadAndConvertClient, error)
}

type pNG2RmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPNG2RmServiceClient(cc grpc.ClientConnInterface) PNG2RmServiceClient {
	return &pNG2RmServiceClient{cc}
}

func (c *pNG2RmServiceClient) UploadAndConvert(ctx context.Context, opts ...grpc.CallOption) (PNG2RmService_UploadAndConvertClient, error) {
	stream, err := c.cc.NewStream(ctx, &PNG2RmService_ServiceDesc.Streams[0], "/png2rm.PNG2RmService/UploadAndConvert", opts...)
	if err != nil {
		return nil, err
	}
	x := &pNG2RmServiceUploadAndConvertClient{stream}
	return x, nil
}

type PNG2RmService_UploadAndConvertClient interface {
	Send(*UploadPNGRequest) error
	Recv() (*UploadPNGResponse, error)
	grpc.ClientStream
}

type pNG2RmServiceUploadAndConvertClient struct {
	grpc.ClientStream
}

func (x *pNG2RmServiceUploadAndConvertClient) Send(m *UploadPNGRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pNG2RmServiceUploadAndConvertClient) Recv() (*UploadPNGResponse, error) {
	m := new(UploadPNGResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PNG2RmServiceServer is the server API for PNG2RmService service.
// All implementations must embed UnimplementedPNG2RmServiceServer
// for forward compatibility
type PNG2RmServiceServer interface {
	UploadAndConvert(PNG2RmService_UploadAndConvertServer) error
	mustEmbedUnimplementedPNG2RmServiceServer()
}

// UnimplementedPNG2RmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPNG2RmServiceServer struct {
}

func (UnimplementedPNG2RmServiceServer) UploadAndConvert(PNG2RmService_UploadAndConvertServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAndConvert not implemented")
}
func (UnimplementedPNG2RmServiceServer) mustEmbedUnimplementedPNG2RmServiceServer() {}

// UnsafePNG2RmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PNG2RmServiceServer will
// result in compilation errors.
type UnsafePNG2RmServiceServer interface {
	mustEmbedUnimplementedPNG2RmServiceServer()
}

func RegisterPNG2RmServiceServer(s grpc.ServiceRegistrar, srv PNG2RmServiceServer) {
	s.RegisterService(&PNG2RmService_ServiceDesc, srv)
}

func _PNG2RmService_UploadAndConvert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PNG2RmServiceServer).UploadAndConvert(&pNG2RmServiceUploadAndConvertServer{stream})
}

type PNG2RmService_UploadAndConvertServer interface {
	Send(*UploadPNGResponse) error
	Recv() (*UploadPNGRequest, error)
	grpc.ServerStream
}

type pNG2RmServiceUploadAndConvertServer struct {
	grpc.ServerStream
}

func (x *pNG2RmServiceUploadAndConvertServer) Send(m *UploadPNGResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pNG2RmServiceUploadAndConvertServer) Recv() (*UploadPNGRequest, error) {
	m := new(UploadPNGRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PNG2RmService_ServiceDesc is the grpc.ServiceDesc for PNG2RmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PNG2RmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "png2rm.PNG2RmService",
	HandlerType: (*PNG2RmServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAndConvert",
			Handler:       _PNG2RmService_UploadAndConvert_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "png2rm.proto",
}
